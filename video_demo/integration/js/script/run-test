#!/bin/bash -i

function start_demo_meeting {
    cd $GITHUB_WORKSPACE/demos/browser
    uuid=$(uuidgen)
    mkdir -p logs
    if [[ $1 == 'meetingReadinessChecker' ]]
    then
      extra_args='--app=meetingReadinessChecker'
      echo "Starting meeting readiness checker"
    else
      echo "Starting the meeting demo"
    fi
    npm run start $extra_args &> logs/$uuid.log &
}

function did_server_start {
    if ! lsof -i:$1 > /dev/null
    then
        echo 0
    else
        echo 1
    fi
}

function wait_for_demo_to_start {
    echo "Waiting for the demo to start"
    threshold=40
    started=0
    retry_count=1
    while [ $started -eq 0 ] && [ $retry_count -lt $threshold ]
    do
      started=$(did_server_start $1)
      sleep 3
      retry_count=$(($retry_count+1))
    done

    if [ $retry_count -eq $threshold ]
    then
     echo "meeting demo not started"
     exit
    fi
}

function check_if_integ_tests_required {
base_branch=$(head -n 1 ../../.base-branch)
commits=`git rev-list $base_branch..`
echo 'Commits:'  $commits

requires_integration_test=false
for commit in $commits
do
   commit_files=`git diff-tree --no-commit-id --name-only -r ${commit}`
   echo 'Commited files are: ' $commit_files
   matches=false
   for committed_file in $commit_files
   do
      while read -r stem
      do
         if [[ $stem =~ ^#.* ]]
         then
               continue
         elif [[ $stem = "" ]]
         then
               continue
         elif [[ $stem =~ ^!.* ]]
         then
               stem_string="${stem:1}"
               if [[ $committed_file = $stem_string* ]]
               then
                  matches=false
               fi
         elif [[ $committed_file = $stem* ]]
         then
               matches=true
         fi
      done < "../../.integration-watchlist"
      if [[ $matches ]]
      then
         requires_integration_test=true
      fi
   done
done

echo 'Requires integ tests:' $requires_integration_test
if ![[ $requires_integration_test ]]
then
   exit 0
fi
}
echo `pwd`
check_if_integ_tests_required
curr=`pwd`

if [[ $1 == meeting_readiness_checker ]]
then
  start_demo_meeting 'meetingReadinessChecker'
else
  start_demo_meeting
fi

wait_for_demo_to_start 8080
cd $curr
cd ../
. ~/.bashrc

case $1 in
   audio)
      r audio_test.config.json
      r app_quit_audio_test.config.json
      r meeting_leave_audio_test.config.json
      ;;
   video)
      r video_test.config.json
      #  TODO: Re-enable simulcast test after it has been fixed
      # r video_test_simulcast.config.json
      r app_quit_video_test.config.json
      r meeting_leave_video_test.config.json
      r reconnection_test.config.json
      ;;
   meeting_end)
      r meeting_end_test.config.json
      ;;
   content_share)
      r content_share_screen_capture_test.config.json
      r content_share_only_allow_two_test.config.json
      r content_share_join_later_test.config.json
      r app_quit_content_share_test.config.json
      r meeting_leave_content_share_test.config.json
      r content_share_video_test.config.json
      ;;
   data_message)
      r data_message_test.config.json
      ;;
   meeting_readiness_checker)
      r meeting_readiness_checker_test.config.json
      ;;
   *)
      r audio_test.config.json
      r video_test.config.json
      r meeting_end_test.config.json
      r app_quit_audio_test.config.json
      r app_quit_video_test.config.json
      r meeting_leave_audio_test.config.json
      r meeting_leave_video_test.config.json
      ;;
esac

./js/script/failure-check
